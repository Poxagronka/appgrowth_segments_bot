# app.py ‚Äî Slack-–±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AppGrowth (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import os
import re
import logging
from dotenv import load_dotenv
from flask import Flask, request
from slack_bolt import App
from slack_bolt.adapter.flask import SlackRequestHandler

import appgrowth

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
SLACK_BOT_TOKEN = os.getenv("SLACK_BOT_TOKEN")
SLACK_SIGNING_SECRET = os.getenv("SLACK_SIGNING_SECRET")

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ App ID –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
POPULAR_APP_IDS = [
    "com.easybrain.number.puzzle.game",
    "com.pixel.art.coloring.color.number", 
    "com.king.candycrushsaga",
    "com.supercell.clashofclans",
    "com.tencent.ig",
    "com.facebook.katana",
    "com.whatsapp",
    "com.instagram.android",
    "com.spotify.music",
    "com.netflix.mediaclient",
    "com.google.android.apps.maps",
    "com.twitter.android",
    "com.skype.raider",
    "com.viber.voip",
    "com.snapchat.android"
]

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã —Å –∫–æ–¥–∞–º–∏
POPULAR_COUNTRIES = [
    {"text": {"type": "plain_text", "text": "üá∫üá∏ USA - –°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã"}, "value": "USA"},
    {"text": {"type": "plain_text", "text": "üáπüá≠ THA - –¢–∞–∏–ª–∞–Ω–¥"}, "value": "THA"},
    {"text": {"type": "plain_text", "text": "üá≥üá± NLD - –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã"}, "value": "NLD"},
    {"text": {"type": "plain_text", "text": "üá©üá™ DEU - –ì–µ—Ä–º–∞–Ω–∏—è"}, "value": "DEU"},
    {"text": {"type": "plain_text", "text": "üá´üá∑ FRA - –§—Ä–∞–Ω—Ü–∏—è"}, "value": "FRA"},
    {"text": {"type": "plain_text", "text": "üá¨üáß GBR - –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è"}, "value": "GBR"},
    {"text": {"type": "plain_text", "text": "üáØüáµ JPN - –Ø–ø–æ–Ω–∏—è"}, "value": "JPN"},
    {"text": {"type": "plain_text", "text": "üá∞üá∑ KOR - –ö–æ—Ä–µ—è"}, "value": "KOR"},
    {"text": {"type": "plain_text", "text": "üáßüá∑ BRA - –ë—Ä–∞–∑–∏–ª–∏—è"}, "value": "BRA"},
    {"text": {"type": "plain_text", "text": "üáÆüá≥ IND - –ò–Ω–¥–∏—è"}, "value": "IND"},
    {"text": {"type": "plain_text", "text": "üá®üá¶ CAN - –ö–∞–Ω–∞–¥–∞"}, "value": "CAN"},
    {"text": {"type": "plain_text", "text": "üá¶üá∫ AUS - –ê–≤—Å—Ç—Ä–∞–ª–∏—è"}, "value": "AUS"},
    {"text": {"type": "plain_text", "text": "üá≤üáΩ MEX - –ú–µ–∫—Å–∏–∫–∞"}, "value": "MEX"},
    {"text": {"type": "plain_text", "text": "üá™üá∏ ESP - –ò—Å–ø–∞–Ω–∏—è"}, "value": "ESP"},
    {"text": {"type": "plain_text", "text": "üáÆüáπ ITA - –ò—Ç–∞–ª–∏—è"}, "value": "ITA"}
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bolt-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bolt_app = App(
    token=SLACK_BOT_TOKEN,
    signing_secret=SLACK_SIGNING_SECRET,
    logger=logger,
)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ AppGrowth –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if not appgrowth.login():
    logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ AppGrowth ‚Äî –≤—ã—Ö–æ–¥–∏–º")
    raise RuntimeError("AppGrowth auth failed :(")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´/appgrowth¬ª ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bolt_app.command("/appgrowth")
def handle_appgrowth(ack, respond, command):
    ack()
    text = command.get("text", "").strip()
    
    if not text:
        # –ì–ª–∞–≤–Ω–∞—è help-–∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–ª—å–∫–æ —Å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
        respond(
            blocks=[
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn", 
                        "text": "*üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AppGrowth Bot!*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ AppGrowth:\n‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—É—é —Ñ–æ—Ä–º—É\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Å–µ–≥–º–µ–Ω—Ç–∞\n‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
                    }
                },
                {
                    "type": "actions", 
                    "elements": [
                        {
                            "type": "button", 
                            "text": {"type": "plain_text", "text": "‚ûï –ù–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç"}, 
                            "action_id": "new_segment_btn",
                            "style": "primary"
                        },
                        {
                            "type": "button", 
                            "text": {"type": "plain_text", "text": "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"}, 
                            "url": "https://docs.appgrowth.com"
                        }
                    ]
                },
                {
                    "type": "context",
                    "elements": [
                        {
                            "type": "mrkdwn",
                            "text": "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/appgrowth ping` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"
                        }
                    ]
                }
            ]
        )
        return
    
    if text.lower() == 'ping':
        respond(
            blocks=[
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": "üü¢ *pong!* –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚ú®"
                    }
                }
            ]
        )
        return
    
    # –î–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
    respond(
        blocks=[
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: `{text}`\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ `/appgrowth` - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n‚Ä¢ `/appgrowth ping` - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
                }
            }
        ]
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ù–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç¬ª
@bolt_app.action("new_segment_btn")
def open_segment_modal(ack, body, client):
    ack()
    trigger_id = body["trigger_id"]
    client.views_open(
        trigger_id=trigger_id,
        view={
            "type": "modal",
            "callback_id": "create_segment_modal",
            "title": {"type": "plain_text", "text": "üéØ –ù–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç"},
            "submit": {"type": "plain_text", "text": "–°–æ–∑–¥–∞—Ç—å"},
            "close": {"type": "plain_text", "text": "–û—Ç–º–µ–Ω–∞"},
            "private_metadata": body["channel_id"],
            "blocks": [
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn", 
                        "text": "*–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ AppGrowth*\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞:"
                    }
                },
                {"type": "divider"},
                {
                    "type": "input",
                    "block_id": "title_block",
                    "element": {
                        "type": "external_select",
                        "action_id": "title_input",
                        "placeholder": {"type": "plain_text", "text": "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ App ID"},
                        "min_query_length": 3
                    },
                    "label": {"type": "plain_text", "text": "üì± App ID"},
                    "hint": {"type": "plain_text", "text": "Bundle ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä com.easybrain.number.puzzle.game"}
                },
                {
                    "type": "input",
                    "block_id": "country_block",
                    "element": {
                        "type": "static_select",
                        "action_id": "country_input",
                        "placeholder": {"type": "plain_text", "text": "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É"},
                        "options": POPULAR_COUNTRIES
                    },
                    "label": {"type": "plain_text", "text": "üåç –°—Ç—Ä–∞–Ω–∞"},
                    "hint": {"type": "plain_text", "text": "–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ 3 –±—É–∫–≤ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞"}
                },
                {
                    "type": "input",
                    "block_id": "type_block",
                    "element": {
                        "type": "static_select",
                        "action_id": "type_select",
                        "placeholder": {"type": "plain_text", "text": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ–≥–º–µ–Ω—Ç–∞"},
                        "options": [
                            {
                                "text": {"type": "plain_text", "text": "‚è±Ô∏è RetainedAtLeast - –£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"}, 
                                "value": "RetainedAtLeast"
                            },
                            {
                                "text": {"type": "plain_text", "text": "üë• ActiveUsers - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"}, 
                                "value": "ActiveUsers"
                            }
                        ]
                    },
                    "label": {"type": "plain_text", "text": "üìä –¢–∏–ø —Å–µ–≥–º–µ–Ω—Ç–∞"}
                },
                {
                    "type": "input",
                    "block_id": "value_block",
                    "element": {
                        "type": "plain_text_input",
                        "action_id": "value_input",
                        "placeholder": {"type": "plain_text", "text": "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ"}
                    },
                    "label": {"type": "plain_text", "text": "üéØ –ó–Ω–∞—á–µ–Ω–∏–µ"},
                    "hint": {"type": "plain_text", "text": "–î–ª—è RetainedAtLeast: —á–∏—Å–ª–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30). –î–ª—è ActiveUsers: –¥–æ–ª—è –æ—Ç 0 –¥–æ 1 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.95)"}
                },
                {
                    "type": "section",
                    "block_id": "preview_block",
                    "text": {
                        "type": "mrkdwn",
                        "text": "*–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è —Å–µ–≥–º–µ–Ω—Ç–∞:*\n`bloom_[app-id]_[country]_[value]`"
                    }
                }
            ]
        }
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –¥–ª—è App ID
@bolt_app.options("title_input")
def handle_app_id_options(ack, body):
    query = body.get("value", "").lower()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ App ID –ø–æ –∑–∞–ø—Ä–æ—Å—É
    filtered_options = []
    for app_id in POPULAR_APP_IDS:
        if query in app_id.lower():
            filtered_options.append({
                "text": {"type": "plain_text", "text": app_id},
                "value": app_id
            })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π App ID –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
    if query and len(query) > 5 and not any(query in app.lower() for app in POPULAR_APP_IDS):
        filtered_options.insert(0, {
            "text": {"type": "plain_text", "text": f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {query}"},
            "value": query
        })
    
    ack(options=filtered_options[:10])  # –ú–∞–∫—Å–∏–º—É–º 10 –æ–ø—Ü–∏–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–æ–¥–∞–ª–∫–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ preview
@bolt_app.action("type_select")
def handle_type_change(ack, body, client):
    ack()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    view_id = body["view"]["id"]
    selected_type = body["actions"][0]["selected_option"]["value"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º hint –¥–ª—è –ø–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    value_hint = {
        "RetainedAtLeast": "–ß–∏—Å–ª–æ –¥–Ω–µ–π —É–¥–µ—Ä–∂–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7, 14, 30)",
        "ActiveUsers": "–î–æ–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç 0 –¥–æ 1 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.80, 0.95)"
    }
    
    value_placeholder = {
        "RetainedAtLeast": "30",
        "ActiveUsers": "0.95"
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª–∫—É
    updated_view = body["view"]
    updated_view["blocks"][4]["element"]["placeholder"]["text"] = value_placeholder.get(selected_type, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    updated_view["blocks"][4]["hint"]["text"] = value_hint.get(selected_type, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞")
    
    client.views_update(
        view_id=view_id,
        view=updated_view
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö –¥–ª—è preview
@bolt_app.action(re.compile("title_input|country_input|value_input"))
def handle_field_changes(ack, body, client):
    ack()
    
    try:
        view_id = body["view"]["id"]
        values = body["view"]["state"]["values"]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        title = ""
        country = ""
        value = ""
        seg_type = "ActiveUsers"  # default
        
        if "title_block" in values and values["title_block"]["title_input"]["selected_option"]:
            title = values["title_block"]["title_input"]["selected_option"]["value"]
        
        if "country_block" in values and values["country_block"]["country_input"]["selected_option"]:
            country = values["country_block"]["country_input"]["selected_option"]["value"]
            
        if "type_block" in values and values["type_block"]["type_select"]["selected_option"]:
            seg_type = values["type_block"]["type_select"]["selected_option"]["value"]
            
        if "value_block" in values and values["value_block"]["value_input"]["value"]:
            value = values["value_block"]["value_input"]["value"]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º preview –∏–º–µ–Ω–∏
        if title and country and value:
            try:
                if seg_type == "RetainedAtLeast" and value.isdigit():
                    code = value
                elif seg_type == "ActiveUsers":
                    code = value.split('.')[-1] if '.' in value else value
                else:
                    code = value
                    
                preview_name = f"bloom_{title}_{country}_{code}".lower()
                preview_text = f"*–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è —Å–µ–≥–º–µ–Ω—Ç–∞:*\n`{preview_name}`"
            except:
                preview_text = "*–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è —Å–µ–≥–º–µ–Ω—Ç–∞:*\n`–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è preview`"
        else:
            preview_text = "*–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è —Å–µ–≥–º–µ–Ω—Ç–∞:*\n`–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è preview`"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º preview –±–ª–æ–∫
        updated_view = body["view"]
        updated_view["blocks"][5]["text"]["text"] = preview_text
        
        client.views_update(
            view_id=view_id,
            view=updated_view
        )
    except Exception as e:
        logger.warning(f"Error updating preview: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–±–º–∏—Ç–∞ –º–æ–¥–∞–ª–∫–∏
@bolt_app.view("create_segment_modal")
def handle_segment_submission(ack, body, client):
    values = body["view"]["state"]["values"]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    title_data = values["title_block"]["title_input"]
    title = title_data.get("selected_option", {}).get("value", "").strip() if title_data.get("selected_option") else ""
    
    country_data = values["country_block"]["country_input"]
    country = country_data.get("selected_option", {}).get("value", "").strip() if country_data.get("selected_option") else ""
    
    seg_type_data = values["type_block"]["type_select"]
    seg_type = seg_type_data.get("selected_option", {}).get("value", "") if seg_type_data.get("selected_option") else ""
    
    raw_val = values["value_block"]["value_input"]["value"].strip() if values["value_block"]["value_input"]["value"] else ""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    errors = {}
    
    if not title:
        errors["title_block"] = "–í—ã–±–µ—Ä–∏—Ç–µ App ID"
    
    if not country:
        errors["country_block"] = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É"
        
    if not seg_type:
        errors["type_block"] = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ–≥–º–µ–Ω—Ç–∞"
    
    if not raw_val:
        errors["value_block"] = "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
    else:
        if seg_type == "RetainedAtLeast":
            if not raw_val.isdigit():
                errors["value_block"] = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7, 14, 30)"
            else:
                val = int(raw_val)
                if val <= 0 or val > 365:
                    errors["value_block"] = "–ß–∏—Å–ª–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 365"
        elif seg_type == "ActiveUsers":
            try:
                val = float(raw_val)
                if val <= 0 or val > 1:
                    errors["value_block"] = "–î–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.01 –¥–æ 1.0"
            except ValueError:
                errors["value_block"] = "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.80, 0.95)"
    
    if errors:
        ack(response_action="errors", errors=errors)
        return
    
    ack()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Å–µ–≥–º–µ–Ω—Ç–∞
    try:
        if seg_type == "RetainedAtLeast":
            val = int(raw_val)
            code = str(val)
        else:
            val = float(raw_val)
            code = raw_val.split('.')[-1] if '.' in raw_val else raw_val
            
        name = f"bloom_{title}_{country}_{code}".lower()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
        ok = appgrowth.create_segment(
            name=name,
            title=title,
            app=title,
            country=country,
            audience=val if seg_type == "ActiveUsers" else None,
            seg_type=seg_type
        )
        
        if ok:
            msg = f"‚úÖ *–°–µ–≥–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\nüéØ –ò–º—è: `{name}`\nüì± App: `{title}`\nüåç –°—Ç—Ä–∞–Ω–∞: `{country}`\nüìä –¢–∏–ø: `{seg_type}`\nüéØ –ó–Ω–∞—á–µ–Ω–∏–µ: `{raw_val}`"
        else:
            msg = f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç*\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            
    except Exception as e:
        logger.error(f"Error creating segment: {e}")
        msg = f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:* {e}"
    
    user = body["user"]["id"]
    client.chat_postEphemeral(
        channel=body["view"]["private_metadata"], 
        user=user, 
        text=msg,
        blocks=[
            {
                "type": "section",
                "text": {"type": "mrkdwn", "text": msg}
            }
        ]
    )

# Flask –æ–±—ë—Ä—Ç–∫–∞
flask_app = Flask(__name__)
handler = SlackRequestHandler(bolt_app)

@flask_app.route("/slack/events", methods=["POST"])
def slack_events():
    return handler.handle(request)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    flask_app.run(host="0.0.0.0", port=port)